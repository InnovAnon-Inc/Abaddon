version: 2.1 # use CircleCI 2.0

orbs:
  deepcode: arrai/deepcode@1.1.0
  jira: circleci/jira@1.0.5
  slack: circleci/slack@4.2.0

workflows:
  my-workflow:
    jobs:
      - build:
          context:
            - default
          #post-steps:
          #  - jira/notify
  nightly:
    triggers: #use the triggers key to indicate a scheduled build
      - schedule:
          cron: "0 0 * * *" # use cron syntax to set the schedule
          filters:
            branches:
              only:
                - master
    jobs:
      - nightly
          context:
            - default
      - release:
          context:
            - default
          requires:
            - nightly

jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      #- run: git submodule sync
      #- run: git submodule update --init
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              make openssl tar gzip curl jq
      - run:
          name: Build application Docker image
          command: |
            docker build \
              --cache-from=abaddon \
              -t innovanon/abaddon \
              --build-arg TEST=1 .
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              #docker tag lfs-builder "InnovAnon-Inc/lfs-builder:${CIRCLE_SHA1}"
              #docker push           "InnovAnon-Inc/lfs-builder:${CIRCLE_SHA1}"
              docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
              docker push innovanon/abaddon
            fi
       # TODO
#      - run:
#          name: Push upstream (abaddon-2)
#          command: |
#            if [ "${CIRCLE_BRANCH}" == "master" ]; then
#              sleep 333
#              curl --location --request POST \
#                'https://circleci.com/api/v2/project/github/InnovAnon-Inc/abaddon-2/pipeline' \
#                --header 'Content-Type: application/json' \
#                -u "${API_TOKEN}:"
#            fi
#      - run:
#          name: Push upstream (zandronum)
#          command: |
#            if [ "${CIRCLE_BRANCH}" == "master" ]; then
#              sleep 333
#              curl --location --request POST \
#                'https://circleci.com/api/v2/project/github/InnovAnon-Inc/zandronum/pipeline' \
#                --header 'Content-Type: application/json' \
#                -u "${API_TOKEN}:"
#            fi
      - slack/notify:
          event: fail
          mentions: '@InnovAnon-Inc'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  nightly:
    docker:
      - image: innovanon/abaddon:latest
    steps:
      - run:
          name: Sanity Check
          command: |
            tor --verify-config
      - run:
          name: Build Maps/WAD
          command: |
            set -exu
            #cd /root/oblige/wads
            $SHELL -l -c 'oblige --home /usr/local/share/oblige --batch latest.wad'
      - run: mkdir -vp workspace
      - run: cp    -v  latest.wad workspace/
      - persist_to_workspace:
          root: workspace
          paths:
            - latest.wad
      #- store_artifacts:
      #    path: latest.wad
      #    path: latest.wad latest.wad.gpg
  release:
    docker: 
      - image: innovanon/pusher:latest
    steps:
      - run:
          name: Sanity Check
          command: |
            tor --verify-config
            #command -v ghr
      - run:
          name: Insanity Check
          command: |
            export GOPATH="${HOME}/go"
            export   PATH="${PATH}:${GOPATH}/bin"
            $SHELL -l -c 'command -v ghr'
      - run:
          name: Checkout Project
          command: |
            $SHELL -l -c "sleep 31 && git clone --recursive https://github.com/InnovAnon-Inc/${CIRCLE_PROJECT_REPONAME}.git"
      - run:
          name: Import GPG Key
          command: |
            set -u
            echo -e "$GPG_KEY" | \
            gpg --import
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Sign Project
          command: |
            cd /tmp/workspace
            gpg --sign latest.wad
      - run:
          name: Release Project
          command: |
            cd ${CIRCLE_PROJECT_REPONAME}

            [ ! -z "`git tag`" ] || \
            git tag v1.0
            git describe --tags --long | \
            grep -o '^v[^.]*\.[^.-]*' || \
            git tag v1.0
            revisioncount="$(git log --oneline | wc -l)"
            cleanversion="$(git describe --tags --long | grep -o '^v[^.]*\.[^.-]*' | sed s/^v//)"
            VERSION="$cleanversion.$revisioncount"

            export GOPATH="${HOME}/go"
            export   PATH="${PATH}:${GOPATH}/bin"
            $SHELL -l -c "sleep 31 && ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete v${VERSION} /tmp/workspace"

      - slack/notify:
          event: fail
          mentions: '@InnovAnon-Inc'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

